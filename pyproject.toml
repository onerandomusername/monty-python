[tool.poetry]
name = "monty"
version = "1.0.0"
description = "Helpful bot for python, github, and discord things."
authors = ["aru <genericusername414@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "~=3.10"
aiodns = "~=3.4"
aiohttp = { version = "~=3.11.18", extras = ['speedups'] }
yarl = "^1.17.2" # transitive dependency of aiohttp
arrow = "~=1.3.0"
attrs = "^24.2.0"
base65536 = "^0.1.1"
beautifulsoup4 = "^4.13.4"
cachingutils = { git = "https://github.com/onerandomusername/cachingutils.git", rev='vcokltfre/feat/v2' }
colorama = { version = "~=0.4.5", markers = "sys_platform == 'win32'" }
coloredlogs = "~=15.0"
disnake = { version = '~=2.9.3' }
orjson = "^3.10.18"
fakeredis = "^2.29.0"
gql = "^3.5.2"
lxml = "^5.4.0"
markdownify = "==0.11.6"
mistune = "^2.0.4"
msgpack = "^1.1.0"
redis = { version = "^6.3.0", extras = ['hiredis'] }
Pillow = "^11.2"
psutil = "^5.9.8"
python-dateutil = "^2.9.0"
rapidfuzz = "^3.13.0"
sentry-sdk = "^2.28.0"
statsd = "^3.3.0"
# database dependencies
alembic = "^1.15.2"
asyncpg = "^0.30.0"
SQLAlchemy = { version = "~=2.0.41", extras = ['asyncio'] }
watchfiles = "^1.0.5"

[tool.poetry.extras]
fakeredis = ['fakeredis']
dev = ['fakeredis', 'watchfiles']

[tool.poetry.dev-dependencies]
black = "^24.10.0"
ruff = "==0.7.4"
isort = "^5.13.2"
pre-commit = "^4.2.0"
taskipy = "~=1.14.0"
python-dotenv = "^1.1.0"
pyright = "==1.1.389"
msgpack-types = "^0.5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
preview = true

[tool.isort]
profile = "black"
atomic = true
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 120
lines_after_imports = 2
multi_line_output = 3
use_parentheses = true
known_first_party = ["monty"]

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint.isort]
known-first-party = ["monty"]


[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    "S", # bandit
    # "RUF", # ruff specific exceptions
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "C", # flake8-comprehensions
    "D", # flake-docstrings
    "DTZ", # flake8-datetimez
    "G", # flake8-logging-format
    "Q", # flake8-quotes
    "T201", "T203" # flake8-print
]
ignore = [
    # Missing Docstrings
    "D100","D101","D104","D105","D106","D107",
    # Docstring Whitespace
    "D203","D212","D214","D215",
    # Docstring Content
    "D400","D402","D404","D405","D406","D407","D408","D409","D410","D411","D412","D413","D414","D416","D417",

    # ignore imperative mood for now
    "D401",
    # Type Annotations
    "ANN002","ANN003","ANN101","ANN102","ANN204","ANN206","ANN401",

    # temporarily disabled
    "C901", # mccabe
    "G004", # Logging statement uses f-string
    "S101", # Use of `assert` detected
    "S110", # try-except-pass
    "S311", # pseduo-random generators, random is used everywhere for random choices.
]

[tool.ruff.lint.per-file-ignores]
"monty/alembic/*" = ["D"]
"_global_source_snekcode.py" = ["T201"]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.taskipy.tasks]
export = 'poetry export --without-hashes -o requirements.txt'
start = "python -m monty"
lint = "pre-commit run --all-files"
precommit = "pre-commit install"
pyright = { cmd = "dotenv -f task.env run -- pyright", help = "Run pyright" }
html = "coverage html"
report = "coverage report"

[tool.pyright]
typeCheckingMode = "basic"
include = [
    "monty",
    "*.py",
]

strictParameterNoneValue = false
