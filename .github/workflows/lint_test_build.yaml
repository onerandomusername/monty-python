# Github Action Workflow enforcing our code style and running tests.

# misnomer, but not worth changing it
# still not worth changing imo
name: Lint, Test, Build

# Trigger the workflow on both push (to the main repository)
# and pull requests (against the main repository, but from any repo).
on:
  push:
    branches:
      - main
  pull_request:

# Brand new concurrency setting! This ensures that not more than one run can be triggered for the same commit.
# It is useful for pull requests coming from the main repository since both triggers will match.
concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  read-all

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: j178/prek-action@v1.0.4
        env:
          RUFF_OUTPUT_FORMAT: "github"


  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build & Push
    needs: [lint]
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      # Create a commit SHA-based tag for the container repositories
      - name: Create SHA Container Tag
        id: sha_tag
        run: |
          tag=$(cut -c 1-7 <<< $GITHUB_SHA)
          echo "tag=$tag" >> $GITHUB_OUTPUT
      # Check out the current repository in the `monty` subdirectory
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          path: monty

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      # Build and push the container to the GitHub Container
      # Repository. The container will be tagged as "latest"
      # and with the short SHA of the commit.
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: monty/
          file: monty/Dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/monty-python:latest
          cache-to: type=inline
          tags: |
            ghcr.io/${{ github.repository_owner }}/monty-python:latest
            ghcr.io/${{ github.repository_owner }}/monty-python:${{ steps.sha_tag.outputs.tag }}
          build-args: |
            git_sha=${{ github.sha }}


  artifact:
    name: Generate Artifact
    if: always()
    runs-on: ubuntu-latest
    steps:
      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint-test checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: pull-request-payload
          path: pull_request_payload.json
