# Github Action Workflow enforcing our code style and running tests.

# misnomer, but not worth changing it
# still not worth changing imo
name: Lint, Test, Build

# Trigger the workflow on both push (to the main repository)
# and pull requests (against the main repository, but from any repo).
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  # https://docs.astral.sh/uv/reference/environment/
  UV_LOCKED: 1
  UV_NO_SYNC: 1
  UV_PYTHON_DOWNLOADS: never

permissions:
  contents: read
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: j178/prek-action@8b6a22b79a7469cb7048b98da156f98876c960b1 # v1.0.10
        env:
          RUFF_OUTPUT_FORMAT: "github"
  typing:
    name: Pyright type check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: "3.10"

      - name: Add .venv/bin to PATH
        id: venv-bin
        run: |
          uv venv .venv
          dirname "$(uv python find)" >> $GITHUB_PATH
          echo python="$(uv python find)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        # `--no-venv` to install in the main pdm venv instead of nox's pyright-specific one
        # because nox uses pdm internally to install, this means that the venv that is used is
        # the one that pdm would create in project: `.venv`
        # python is NOT forced here because the session name is explicit
        env:
          NOXSESSION: pyright
          NOX_DEFAULT_VENV_BACKEND: "none"
          ## needed to install specific dependencies
          ## used internally when nox calls pip to install a dependency in the venv
          PIP_PYTHON: ${{ steps.venv-bin.outputs.python }}
        run: |
          nox --install-only

      - name: Run pyright (Linux)
        uses: jakebailey/pyright-action@6cabc0f01c4994be48fd45cd9dbacdd6e1ee6e5e # v2.3.3
        id: pyright-linux
        with:
          version: PATH
          python-version: ${{ steps.setup-env.outputs.python-version }}
          python-platform: "Linux"
          annotate: true
          warnings: true


  check:  # This job does nothing and is only used for the branch protection
    name: Check CI passed
    if: always()
    needs:
      - lint
      - typing

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}


  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build & Push
    needs: [check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # used to publish to GHCR

    steps:
      # Create a commit SHA-based tag for the container repositories
      - name: Create SHA Container Tag
        id: sha_tag
        run: |
          tag=$(cut -c 1-7 <<< $GITHUB_SHA)
          echo "tag=$tag" >> $GITHUB_OUTPUT
      # Check out the current repository in the `monty` subdirectory
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: monty
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to Github Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      # Build and push the container to the GitHub Container
      # Repository. The container will be tagged as "latest"
      # and with the short SHA of the commit.
      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: monty/
          file: monty/Dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/monty-python:latest
          cache-to: type=inline
          tags: |
            ghcr.io/${{ github.repository_owner }}/monty-python:latest
            ghcr.io/${{ github.repository_owner }}/monty-python:${{ steps.sha_tag.outputs.tag }}
          build-args: |
            git_sha=${{ github.sha }}


  artifact:
    name: Generate Artifact
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint-test checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: pull-request-payload
          path: pull_request_payload.json
